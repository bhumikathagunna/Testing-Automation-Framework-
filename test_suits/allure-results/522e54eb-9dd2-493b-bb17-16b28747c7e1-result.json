{"name": "test_valid_login[chrome]", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <button type=\"submit\" class=\"btn btn-bg btn-primary d-block w-100\">...</button> is not clickable at point (855, 925). Other element would receive the click: <iframe id=\"aswift_7\" name=\"aswift_7\" browsingtopics=\"true\" style=\"width: 728px !important; height: 90px !important; display: block; margin: 0px auto;\" sandbox=\"allow-forms allow-popups allow-popups-to-escape-sandbox allow-same-origin allow-scripts allow-top-navigation-by-user-activation\" width=\"728\" height=\"90\" frameborder=\"0\" marginwidth=\"0\" marginheight=\"0\" vspace=\"0\" hspace=\"0\" allowtransparency=\"true\" scrolling=\"no\" allow=\"attribution-reporting; run-ad-auction\" src=\"https://googleads.g.doubleclick.net/pagead/html/r20250224/r20190131/zrt_lookup_fy2021.html#RS-3-&amp;adk=1812271801&amp;client=ca-pub-1056034821646296&amp;fa=1&amp;ifi=8&amp;uci=a!8&amp;btvi=5\" data-google-container-id=\"a!8\" tabindex=\"0\" title=\"Advertisement\" aria-label=\"Advertisement\" data-google-query-id=\"CJKtko7O34sDFUuNrAIdqsY24A\" data-load-complete=\"true\"></iframe>\n  (Session info: chrome=133.0.6943.127)\nStacktrace:\n0   chromedriver                        0x0000000102cdabbc cxxbridge1$str$ptr + 2724820\n1   chromedriver                        0x0000000102cd321c cxxbridge1$str$ptr + 2693684\n2   chromedriver                        0x0000000102839afc cxxbridge1$string$len + 93348\n3   chromedriver                        0x0000000102886398 cxxbridge1$string$len + 406848\n4   chromedriver                        0x0000000102884928 cxxbridge1$string$len + 400080\n5   chromedriver                        0x000000010288273c cxxbridge1$string$len + 391396\n6   chromedriver                        0x0000000102881b38 cxxbridge1$string$len + 388320\n7   chromedriver                        0x0000000102876630 cxxbridge1$string$len + 341976\n8   chromedriver                        0x00000001028760bc cxxbridge1$string$len + 340580\n9   chromedriver                        0x00000001028c1b94 cxxbridge1$string$len + 650556\n10  chromedriver                        0x0000000102874ba0 cxxbridge1$string$len + 335176\n11  chromedriver                        0x0000000102ca3674 cxxbridge1$str$ptr + 2498188\n12  chromedriver                        0x0000000102ca6988 cxxbridge1$str$ptr + 2511264\n13  chromedriver                        0x0000000102c88d14 cxxbridge1$str$ptr + 2389292\n14  chromedriver                        0x0000000102ca7230 cxxbridge1$str$ptr + 2513480\n15  chromedriver                        0x0000000102c79cfc cxxbridge1$str$ptr + 2327828\n16  chromedriver                        0x0000000102cc38e4 cxxbridge1$str$ptr + 2629884\n17  chromedriver                        0x0000000102cc3a6c cxxbridge1$str$ptr + 2630276\n18  chromedriver                        0x0000000102cd2e90 cxxbridge1$str$ptr + 2692776\n19  libsystem_pthread.dylib             0x00000001891302e4 _pthread_start + 136\n20  libsystem_pthread.dylib             0x000000018912b0fc thread_start + 8", "trace": "self = <test_suits.test_login.TestLogin object at 0x102537890>\n\n    def test_valid_login(self):\n        login_page = LoginPage(self.driver, self.logger)\n>       assert login_page.login(\"practice\", \"SuperSecretPassword!\")\n\ntest_login.py:17: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../pages/login_page.py:58: in login\n    self.click_login_button()\n../pages/login_page.py:41: in click_login_button\n    if self.click_element(self.driver, ElementMap.LOGIN_BUTTON_XPATH):\n../lib/helpers.py:14: in click_element\n    element.click()\n/Library/Frameworks/Python.framework/Versions/3.13/lib/python3.13/site-packages/selenium/webdriver/remote/webelement.py:119: in click\n    self._execute(Command.CLICK_ELEMENT)\n/Library/Frameworks/Python.framework/Versions/3.13/lib/python3.13/site-packages/selenium/webdriver/remote/webelement.py:572: in _execute\n    return self._parent.execute(command, params)\n/Library/Frameworks/Python.framework/Versions/3.13/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:429: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x1025f0910>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...0001891302e4 _pthread_start + 136\\\\n20  libsystem_pthread.dylib             0x000000018912b0fc thread_start + 8\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <button type=\"submit\" class=\"btn btn-bg btn-primary d-block w-100\">...</button> is not clickable at point (855, 925). Other element would receive the click: <iframe id=\"aswift_7\" name=\"aswift_7\" browsingtopics=\"true\" style=\"width: 728px !important; height: 90px !important; display: block; margin: 0px auto;\" sandbox=\"allow-forms allow-popups allow-popups-to-escape-sandbox allow-same-origin allow-scripts allow-top-navigation-by-user-activation\" width=\"728\" height=\"90\" frameborder=\"0\" marginwidth=\"0\" marginheight=\"0\" vspace=\"0\" hspace=\"0\" allowtransparency=\"true\" scrolling=\"no\" allow=\"attribution-reporting; run-ad-auction\" src=\"https://googleads.g.doubleclick.net/pagead/html/r20250224/r20190131/zrt_lookup_fy2021.html#RS-3-&amp;adk=1812271801&amp;client=ca-pub-1056034821646296&amp;fa=1&amp;ifi=8&amp;uci=a!8&amp;btvi=5\" data-google-container-id=\"a!8\" tabindex=\"0\" title=\"Advertisement\" aria-label=\"Advertisement\" data-google-query-id=\"CJKtko7O34sDFUuNrAIdqsY24A\" data-load-complete=\"true\"></iframe>\nE         (Session info: chrome=133.0.6943.127)\nE       Stacktrace:\nE       0   chromedriver                        0x0000000102cdabbc cxxbridge1$str$ptr + 2724820\nE       1   chromedriver                        0x0000000102cd321c cxxbridge1$str$ptr + 2693684\nE       2   chromedriver                        0x0000000102839afc cxxbridge1$string$len + 93348\nE       3   chromedriver                        0x0000000102886398 cxxbridge1$string$len + 406848\nE       4   chromedriver                        0x0000000102884928 cxxbridge1$string$len + 400080\nE       5   chromedriver                        0x000000010288273c cxxbridge1$string$len + 391396\nE       6   chromedriver                        0x0000000102881b38 cxxbridge1$string$len + 388320\nE       7   chromedriver                        0x0000000102876630 cxxbridge1$string$len + 341976\nE       8   chromedriver                        0x00000001028760bc cxxbridge1$string$len + 340580\nE       9   chromedriver                        0x00000001028c1b94 cxxbridge1$string$len + 650556\nE       10  chromedriver                        0x0000000102874ba0 cxxbridge1$string$len + 335176\nE       11  chromedriver                        0x0000000102ca3674 cxxbridge1$str$ptr + 2498188\nE       12  chromedriver                        0x0000000102ca6988 cxxbridge1$str$ptr + 2511264\nE       13  chromedriver                        0x0000000102c88d14 cxxbridge1$str$ptr + 2389292\nE       14  chromedriver                        0x0000000102ca7230 cxxbridge1$str$ptr + 2513480\nE       15  chromedriver                        0x0000000102c79cfc cxxbridge1$str$ptr + 2327828\nE       16  chromedriver                        0x0000000102cc38e4 cxxbridge1$str$ptr + 2629884\nE       17  chromedriver                        0x0000000102cc3a6c cxxbridge1$str$ptr + 2630276\nE       18  chromedriver                        0x0000000102cd2e90 cxxbridge1$str$ptr + 2692776\nE       19  libsystem_pthread.dylib             0x00000001891302e4 _pthread_start + 136\nE       20  libsystem_pthread.dylib             0x000000018912b0fc thread_start + 8\n\n/Library/Frameworks/Python.framework/Versions/3.13/lib/python3.13/site-packages/selenium/webdriver/remote/errorhandler.py:232: ElementClickInterceptedException"}, "attachments": [{"name": "log", "source": "0b67089b-ae98-4e60-aa5c-18ee7009a6f4-attachment.txt", "type": "text/plain"}, {"name": "stdout", "source": "32f88698-7f31-4449-b2ae-53b029018432-attachment.txt", "type": "text/plain"}, {"name": "stderr", "source": "954e8325-fb14-49de-8c0a-be13f8b6d776-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "init_driver", "value": "'chrome'"}], "start": 1740513512814, "stop": 1740513518630, "uuid": "ffc6ef02-90ed-4b6e-99c0-7634e5521bca", "historyId": "8158dae5b5853a6ced8f0bd9b687a2aa", "testCaseId": "d5c7fb01e529c260dcfe4b6cd6a39a86", "fullName": "test_login.TestLogin#test_valid_login", "labels": [{"name": "tag", "value": "@pytest.mark.usefixtures('init_logger', 'init_driver')"}, {"name": "suite", "value": "test_login"}, {"name": "subSuite", "value": "TestLogin"}, {"name": "host", "value": "BHUMIKAs-MacBook-Air.local"}, {"name": "thread", "value": "34629-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_login"}]}